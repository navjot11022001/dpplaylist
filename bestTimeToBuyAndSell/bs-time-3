class Solution {
    public int maxProfit(int[] prices) {
     int dp[][][]=new int[prices.length+1][2][2];
        for(int[][] dpp:dp)
            for(int[] kk:dpp )
        Arrays.fill(kk,-1);
        
return bestTime(prices,0,0,1,dp);
        
        
    }
    
    int bestTime(int []prices,int curr,int k,int buy,int dp[][][]){
        
        if(k==2 || curr==prices.length)return 0;
        if(dp[curr][buy][k]!=-1)return dp[curr][buy][k];
        if(buy==1){
            int buyKrlo=bestTime(prices,curr+1,k,0,dp)-prices[curr];
                int mtBuyKro=bestTime(prices,curr+1,k,buy,dp);
            
        return dp[curr][buy][k]= Math.max(buyKrlo,mtBuyKro);
        }
        
        else{
            
            int sellKro=bestTime(prices,curr+1,k+1,1,dp)+prices[curr];
            int sellMtKro=bestTime(prices,curr+1,k,buy,dp);
            return dp[curr][buy][k]=Math.max(sellKro,sellMtKro);
                
                
        }
        
    }
    
}
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/